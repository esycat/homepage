import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.Path

import com.eriwen.gradle.js.JsPlugin
import com.eriwen.gradle.js.tasks.*
import com.eriwen.gradle.css.CssPlugin
import com.eriwen.gradle.css.tasks.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.eriwen', name: 'gradle-js-plugin',  version: project.ext.get('plugin.js.version')
        classpath group: 'com.eriwen', name: 'gradle-css-plugin', version: project.ext.get('plugin.css.version')
    }
}

apply plugin: JsPlugin
apply plugin: CssPlugin

// The CSS plugin adds Maven Central to the project's repositories.
// See https://github.com/eriwen/gradle-css-plugin/issues/29
// A temporary workaround to overcome this issue:
repositories.remove(repositories.size() - 1)

ext {
    sourceSetDir    = projectDir.toPath().resolve(config.system.mainSrcDir)
    jsSrcDir        = sourceSetDir.resolve(config.system.js.srcDir)
    jsDestDir       = sourceSetDir.resolve(config.system.js.destDir)
    cssSrcDir       = sourceSetDir.resolve(config.system.css.srcDir)
    cssDestDir      = sourceSetDir.resolve(config.system.css.destDir)
    requireJsConfig = jsSrcDir.resolve('require.config.js')
}

// Declare JavaScript sources
javascript.source {
    def defaultSourceSet = {
        srcDir jsSrcDir.toFile()
        include '**/*.js'
        exclude '**/*.min.js'
        exclude project.name + '.js'
    }
    dev.js  defaultSourceSet
    test.js defaultSourceSet
    prod.js defaultSourceSet
}

// Declare StyleSheet sources
css.source {
    def defaultSourceSet = {
        srcDir cssSrcDir.toFile()
        include '*.css'
        exclude '*.min.css'
        exclude project.name + '.css'
    }
    dev.css  defaultSourceSet
    test.css defaultSourceSet
    prod.css defaultSourceSet
}

/**
 * @return List Command line arguments for SCSS
 */
def getScssArgs() {
    def args = []

    args.add('--force')
    args.add('--no-cache')

    if (env == 'dev') {
        args.add('--debug-info')
    }
    else {
        args.add('--style')
        args.add('compressed')
    }

    args.add cssSrcDir.resolve(project.name + '.scss')
    args.add cssDestDir.resolve(project.name + '.css')

    args
}

def getTargetFile(Path path, String ext, String suffix = null) {
    def name = project.name + (suffix ? '.' + suffix : '') + '.' + ext
    path.resolve(name).toFile()
}

task ('js-combine', type: CombineJsTask) {
    source javascript.source[env].js.files
    dest getTargetFile(jsDestDir, 'js')
}

task ('js-minify', type: MinifyJsTask) {
    source tasks['js-combine']
    dest getTargetFile(jsDestDir, 'js', 'min')
}

task ('js-compress', type: GzipJsTask) {
    source tasks['js-minify']
    dest getTargetFile(jsDestDir, 'js', 'min')
}

task ('js-compile', type: RequireJsTask) {
    source jsSrcDir.resolve('main.js').toFile()
    dest jsDestDir.resolve('main.min.js').toFile()
    requirejs.buildprofile = requireJsConfig.toFile()

    inputs.dir jsSrcDir.toFile()
    inputs.file requirejs.buildprofile
    outputs.file dest
}

task ('js-clean', type: Delete) {
    delete tasks['js-combine']
    delete tasks['js-minify']
    delete tasks['js-compress']
    delete tasks['js-compile']
}

task ('css-combine', type: CombineCssTask) {
    source css.source[env].css.files
    dest getTargetFile(cssDestDir, 'css')
}

task ('css-minify', type: MinifyCssTask) {
    source tasks['css-combine']
    dest getTargetFile(cssDestDir, 'css', 'min')
}

task ('css-compress', type: GzipCssTask) {
    source tasks['css-minify']
    dest getTargetFile(cssDestDir, 'css', 'min')
}

task ('css-compile', type: Exec) {
    workingDir sourceSetDir.toFile()
    executable 'scss'
    args getScssArgs()
}

task ('css-clean', type: Delete) {
    delete tasks['css-combine']
    delete tasks['css-minify']
    delete tasks['css-compress']
    delete tasks['css-compile']
}
